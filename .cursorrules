# AI 费曼学习代理 - 项目指南

## 1. 项目目标

开发一个 Web 应用和一个配套的 Chrome 浏览器插件。用户可以通过注入到网页的侧边栏，对当前页面内容进行提问，实现费曼学习法。
对标chatgpt/gemini的前端效果。遵循最佳实践。

## 2. 核心技术栈

- **后端**: Python, FastAPI, LangChain, ChromaDB
- **前端构建**: Vite
- **前端框架**: React
- **开发语言**: TypeScript
- **AI 组件库**: Ant Design X (`@ant-design/x`)
- **Chrome 插件**: Manifest V3, 使用 `@samrum/vite-plugin-web-extension` 进行构建

/opt/venvs/base/bin/python

## 3. 项目结构

- `frontend/`: 独立的 Web 前端应用。
- `chrome-extension/`: Chrome 浏览器插件。
- `docs/`: 项目文档，包含详细的技术选型。
- 现有 Python 目录 (`agent/`, `core/` 等) 作为后端 API。
- `/tmp/ant-design-x-reference/`: Ant Design X 官方代码库参考（保留用于查阅正确用法）

## 4. 开发环境规范

- **Node.js**: v20 (通过 `.nvmrc` 文件指定)
- **vite**: v5.4.19
- **包管理器**: pnpm (v10.13.0)，使用工作区（Workspace）模式。

## 5. 开发计划

- [x] **阶段一: 技术选型与规划**
  - [x] 分析后端技术栈。
  - [x] 调研并确定前端与插件技术方案。
  - [x] 撰写并更新技术选型文档。
- [x] **阶段二: 环境搭建与原型开发**
  - [x] 初始化 `frontend` 项目。
  - [x] 配置项目 .gitignore 文件，添加前端常见忽略项。
  - [ ] 初始化 `chrome-extension` 项目。
  - [x] 在 `frontend` 项目中构建基础聊天原型。
  - [x] 优化前端 UI/UX，实现现代化聊天界面。
  - [ ] 在插件中实现基础侧边栏注入功能。
- [x] **阶段三: 后端集成**
  - [x] 对接 FastAPI 后端接口。
  - [x] 解决 CORS 跨域问题。
  - [x] 修复前后端数据格式兼容性问题。
  - [ ] 实现流式聊天响应。
- [x] **阶段四: UI/UX 优化与功能增强**
  - [x] 修复深色主题下的字体颜色显示问题。
  - [x] 添加 Markdown 渲染支持，包括代码高亮。
  - [x] 实现类似 Gemini 的消息操作按钮（复制、重新生成、点赞/点踩、分享）。
  - [ ] 将聊天组件集成到插件侧边栏。
  - [ ] 实现网页内容提取并作为上下文。

## 6. Agent 规则

- 始终使用中文（简体）回应。
- 严格遵循选定的技术栈进行开发。
- 随开发进度动态更新此文件。
- 遵循项目既定的代码与命名规范。
- 及时更新文档，完成一步就要更新进度。
- **重要**: 当遇到 `@ant-design/x` 组件使用问题时，首先查阅 `/tmp/ant-design-x-reference/components/` 目录下的官方示例代码，特别是各组件的 `demo/` 子目录，以获取正确的 API 用法。避免盲目猜测组件属性和用法。